#!/usr/bin/python

from pathlib import Path
import re
import os
from tqdm import tqdm
import argparse
import requests
from iadownload.File import File
import hashlib
from enum import Enum


class SupportedFormats(Enum):
    FLAC = "flac"
    MP3 = "mp3"

    @classmethod
    def values(cls):
        return list(map(lambda f: f.value, cls))


def throw_error(message: str):
    print(message)
    exit(1)


def combine_list(items: list) -> str:
    return ", ".join(items)


def download_file(file: File, output: str) -> bool:
    with requests.get(file.url, stream=True) as dl:
        if dl.status_code == 200:
            total_size = int(dl.headers.get("content-length"))
            with open(output, "wb") as out_file:
                with tqdm(total=total_size, unit="B", unit_scale=True, initial=0, ascii=True) as progress:
                    for chunk in dl.iter_content(chunk_size=1024):
                        if chunk:
                            out_file.write(chunk)
                            progress.update(len(chunk))
            downloaded_md5 = hashlib.md5(open(output, "rb").read()).hexdigest()
            if file.md5 != downloaded_md5:
                print(f"Downloaded file MD5 {downloaded_md5} does not match expected value {file.md5}")
                return False
            else:
                return True
        else:
            return False


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument("url", help="enter a URL to retrieve")
    parser.add_argument("-o", "--output", help="directory to download files to")
    parser.add_argument("-f", "--format", help="format to save files as")
    parser.add_argument("-r", "--retry", help="retry download as mp3 if FLAC download fails", action="store_true")

    args = parser.parse_args()
    url = args.url
    target_dir = Path(args.output) if args.output else Path(os.getcwd())
    format = "flac"
    retry = args.retry

    if args.format in SupportedFormats.values():
        format = args.format
    elif args.format is not None:
        throw_error("Invalid format specified")

    if not re.search("https?://archive.org/.*", url):
        throw_error("Invalid archive.org URL")
        
    if not os.path.exists(target_dir):
        throw_error("Output directory does not exist")

    page = requests.get(f"{url}?output=json").json()

    base_url = "https://" + page.get("server") + page.get("dir")

    metadata = page.get("metadata")

    artist = combine_list(metadata.get("creator"))
    location = combine_list(metadata.get("coverage"))
    venue = combine_list(metadata.get("venue"))
    date = combine_list(metadata.get("date"))
    
    output_dir = Path(f"{target_dir}/{date} - {artist} - {venue}, {location}")
    output_dir.mkdir(parents=True, exist_ok=True)
    print(f"Saving to {output_dir}")

    all_files = page.get("files")
    files = []
    for file in list(all_files):
        files.append(File(base_url + file, all_files.get(file)))
    
    files = filter(lambda file: re.search(f"\\.{format}$", file.ia_file_name) is not None, files)

    for file in files:
        print(f"Downloading {file.ia_file_name} as {file.name}")

        if not download_file(file, f"{output_dir}/{file.name}"):
            print(f"Failed to download {file.ia_file_name} as {file.name}")
